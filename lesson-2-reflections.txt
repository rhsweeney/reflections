What happens when you initialize a repository? Why do you need to do it?
A hidden git directory gets created with a bunch of metadata that allows Git to 
function.  This hidden directory is called .git.  You use 
git init
to initialize a repository.  You can use
git status
to check the current status of your repo

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area is a git feature that allows you to specify what files you 
want included in your next commit. The working directory is just where you work, 
as the name suggests. Then you can specify which files in your working directory 
you want included in the commit. The repository is made up of the commits you 
have made.

How can you use the staging area to make sure you have one commit per logical
change?
Staging area gives me a ton of control over which files and thus logical 
changes I put in the commit. Rather than Git just throwing in all the files 
in my working directory, I get to manually select which ones I want committed. 
So if I only made changes to a specific subset of files that are related to the 
logical change I made then those will be the only files that I'll add to the 
staing area before making my commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
I thought Caroline in the video said it really well "But I'd also like to create 
an easier version of the game. If I do, there will be two versions of the game 
that are almost exactly the same but with some slight differences" plus a little 
bit later she says "I don't want to make this change on the master branch though 
SINCE I DON'T CONSIDER IT AN OFFICIAL UPDATE TO THE GAME. Instead, I'll create 
a branch called easy mode for that change"
So stuff that is not absolutely essential and part of the main goal of the master 
branch/program can be used in a separate branch. This is where the experimental 
part comes into play. If it's not fixing the main bugs in your program then it 
might be best in a separate branch.

How do the diagrams help you visualize the branch structure?
Damn. These git trees can get crazy complex so these diagram visualizations can 
help you keep track of what is up and what is down. I just don't know how you 
keep from getting lost in it all ... but I guess maybe that's where the diagram 
comes in hand
git log --graph --oneline [branch1] [branch2]

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
It combines all the changes made in each branch and sets the label to whatever 
branch you had checked out when the merge command is run. Ummm, I don't know 
why we represent it in the diagram the way we do ... awkward. 
git merge

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
